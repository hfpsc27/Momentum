@page "/docentes"
@using Microsoft.EntityFrameworkCore
@using Microsoft.AspNetCore.Components.QuickGrid
@using Momentum.UI.Models
@using Momentum.UI.Data
@implements IAsyncDisposable
@inject IDbContextFactory<Momentum.UI.Data.AppDbContext2> DbFactory
@rendermode InteractiveServer

<PageTitle>Index</PageTitle>

<h2>Lista de Docentes</h2>
<hr />

<p>
    <a href="docentes/create" class="btn btn-sm btn-outline-primary">Novo docente</a>
</p>

<QuickGrid Class="table table-striped table-sm" Items="FilteredDocentes" Pagination="pagination">
    <PropertyColumn Property="@(d => d.Nome)" Sortable="true" InitialSortDirection="SortDirection.Ascending" IsDefaultSortColumn="true">
        <ColumnOptions>
            <div class="search-box">
                <input type="search" autofocus @bind="nameFilter" @bind:event="oninput" placeholder="Nome..." class="form-control form-control-sm" />
            </div>
        </ColumnOptions>
    </PropertyColumn>

    <PropertyColumn Property="@(d => d.Email)" />

    <TemplateColumn Context="docentes">
        <div class="btn-group" role="group" aria-label="Basic example">
            <a href="@($"docentes/edit?id={docentes.Id}")" class="btn btn-sm btn-outline-primary">Editar</a>
            <a href="@($"docentes/details?id={docentes.Id}")" class="btn btn-sm btn-outline-primary">Detalhe</a>
            <a href="@($"docentes/delete?id={docentes.Id}")" class="btn btn-sm btn-outline-danger">Apagar</a>
        </div>
    </TemplateColumn>
</QuickGrid>

@if (FilteredDocentes.Count() > 35)
{
    <Paginator State="pagination" />
}

@code {
    private AppDbContext2 context = default!;
    IQueryable<Docentes> Docentes = null!;

    string nameFilter = string.Empty;
    PaginationState pagination = new PaginationState { ItemsPerPage = 10 };

    protected override void OnInitialized()
    {
        context = DbFactory.CreateDbContext();
        Docentes = context.Docentes.AsQueryable();
    }

    IQueryable<Docentes> FilteredDocentes
    {
        get
        {
            var result = Docentes.AsQueryable();

            if (!string.IsNullOrWhiteSpace(nameFilter))
                result = result.Where(d => d.Nome.ToLower().Contains(nameFilter.ToLower()));

            return result;
        }
    }

    public async ValueTask DisposeAsync() => await context.DisposeAsync();
}
