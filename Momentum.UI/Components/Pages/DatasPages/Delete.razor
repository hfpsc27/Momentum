@page "/datas/delete"
@using Microsoft.EntityFrameworkCore
@using Momentum.UI.Models
@inject IDbContextFactory<Momentum.UI.Data.AppDbContext2> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Datas</h2>
    <hr />
    @if (datas is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Data</dt>
            <dd class="col-sm-10">@datas.Data</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Sabado</dt>
            <dd class="col-sm-10">@datas.Sabado</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Domingo</dt>
            <dd class="col-sm-10">@datas.Domingo</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Feriado</dt>
            <dd class="col-sm-10">@datas.Feriado</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Ferias</dt>
            <dd class="col-sm-10">@datas.Ferias</dd>
        </dl>
        <EditForm method="post" Model="datas" OnValidSubmit="DeleteDatas" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(datas is null)">Delete</button> |
            <a href="/datas">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Datas? datas;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        datas = await context.Datas.FirstOrDefaultAsync(m => m.Id == Id);

        if (datas is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteDatas()
    {
        using var context = DbFactory.CreateDbContext();
        context.Datas.Remove(datas!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/datas");
    }
}
