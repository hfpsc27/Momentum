@page "/datas/edit"
@using Microsoft.EntityFrameworkCore
@using Momentum.UI.Models
@inject IDbContextFactory<Momentum.UI.Data.AppDbContext2> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Datas</h2>
<hr />
@if (Datas is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Datas" OnValidSubmit="UpdateDatas" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Datas.Id" value="@Datas.Id" />
                <div class="mb-3">
                    <label for="data" class="form-label">Data:</label>
                    <InputDate id="data" @bind-Value="Datas.Data" class="form-control" />
                    <ValidationMessage For="() => Datas.Data" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="sabado" class="form-label">Sabado:</label>
                    <InputCheckbox id="sabado" @bind-Value="Datas.Sabado" class="form-check-input" />
                    <ValidationMessage For="() => Datas.Sabado" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="domingo" class="form-label">Domingo:</label>
                    <InputCheckbox id="domingo" @bind-Value="Datas.Domingo" class="form-check-input" />
                    <ValidationMessage For="() => Datas.Domingo" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="feriado" class="form-label">Feriado:</label>
                    <InputCheckbox id="feriado" @bind-Value="Datas.Feriado" class="form-check-input" />
                    <ValidationMessage For="() => Datas.Feriado" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="ferias" class="form-label">Ferias:</label>
                    <InputCheckbox id="ferias" @bind-Value="Datas.Ferias" class="form-check-input" />
                    <ValidationMessage For="() => Datas.Ferias" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/datas">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Datas? Datas { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Datas ??= await context.Datas.FirstOrDefaultAsync(m => m.Id == Id);

        if (Datas is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateDatas()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Datas!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!DatasExists(Datas!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/datas");
    }

    private bool DatasExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Datas.Any(e => e.Id == id);
    }
}
