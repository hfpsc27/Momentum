@page "/datas/details"
@using Microsoft.EntityFrameworkCore
@using Momentum.UI.Models
@inject IDbContextFactory<Momentum.UI.Data.AppDbContext2> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Datas</h2>
    <hr />
    @if (datas is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">Data</dt>
            <dd class="col-sm-10">@datas.Data</dd>
            <dt class="col-sm-2">Sabado</dt>
            <dd class="col-sm-10">@datas.Sabado</dd>
            <dt class="col-sm-2">Domingo</dt>
            <dd class="col-sm-10">@datas.Domingo</dd>
            <dt class="col-sm-2">Feriado</dt>
            <dd class="col-sm-10">@datas.Feriado</dd>
            <dt class="col-sm-2">Ferias</dt>
            <dd class="col-sm-10">@datas.Ferias</dd>
        </dl>
        <div>
            <a href="@($"/datas/edit?id={datas.Id}")">Edit</a> |
            <a href="@($"/datas")">Back to List</a>
        </div>
    }
</div>

@code {
    private Datas? datas;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        datas = await context.Datas.FirstOrDefaultAsync(m => m.Id == Id);

        if (datas is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
